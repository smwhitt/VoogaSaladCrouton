package voogasalad.view.authoringEnvironment.views;

import javafx.geometry.Point2D;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ScrollPane;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import voogasalad.gameEngine.Engine;
import voogasalad.view.View;
import voogasalad.view.authoringEnvironment.controllers.CancelSaveController;
import voogasalad.view.authoringEnvironment.controllers.waves.SaveWaveToSpawnPoint;
import voogasalad.view.authoringEnvironment.data.WaveData;
import voogasalad.view.clickableobjects.ClickableButton;

import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;

/**
 * @author Angel Huizar
 * This class is responsible for displaying check boxes of available waves to display to the user when the click on a
 * spawnpoint in the map editor (authoring view only)
 */
public class PopUpWaves extends View {
    private Map<CheckBox, String> myList = new HashMap<>();
    private Point2D myLocation;
    private WaveData myWaveData;

    /**
     * This constructor is the only one, and every instance of this class is based of a single point on the grid
     * @param engine the engine this class will work with
     * @param size the size of this display
     * @param location the location of the spawn point the user clicked on
     * @param waveData the waveData generated by the user
     */
    public PopUpWaves(Engine engine, double size, Point2D location, WaveData waveData){
        super(size,size, Color.WHITESMOKE,"",engine);
        myLocation = location;
        myWaveData = waveData;
    }
    /**
     * This method will be called by all views to begin displaying their contents.
     *
     * @return a pane object to be used by a main view to display the contents of that view
     */
    @Override
    public Node startVisualization() {
        BorderPane pane = new BorderPane();
        pane.setCenter(setUpScrollPane());
        pane.setBottom(createButtons());
        return pane;
    }

    private Node createButtons() {
        GridPane pane = createGridPane();
        pane.setAlignment(Pos.BOTTOM_CENTER);

        //button to save
        ClickableButton save = new ClickableButton(ResourceBundle.getBundle(languagePath + LANGUAGE).getString("save"),
                new SaveWaveToSpawnPoint(super.getEngine(),myWaveData,myList,myLocation, this));
        pane.add(save.getNode(),0,0);

        //button to cancel
        ClickableButton cancel = new ClickableButton(ResourceBundle.getBundle(languagePath + LANGUAGE).getString("cancel"),
                new CancelSaveController(this,super.getEngine()));
        pane.add(cancel.getNode(),1,0);
        return pane;
    }

    private Node setUpScrollPane() {
        ScrollPane pane = new ScrollPane();
        pane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
        pane.setContent(setUpChoices());
        return pane;
    }

    private Node setUpChoices() {
        VBox box = new VBox();
        if(myWaveData.getIDNameMap().keySet()!=null) {
            myWaveData.getIDNameMap().forEach((string,integer) -> {
                myList.put(new CheckBox(string), string);
            });
            box.getChildren().addAll(myList.keySet());
        }
        return box;
    }
}
